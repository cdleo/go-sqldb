// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cdleo/go-sqldb (interfaces: SQLSyntaxTranslator)

// Package translatorsMocks is a generated GoMock package.
package translatorsMocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSQLSyntaxTranslator is a mock of SQLSyntaxTranslator interface.
type MockSQLSyntaxTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockSQLSyntaxTranslatorMockRecorder
}

// MockSQLSyntaxTranslatorMockRecorder is the mock recorder for MockSQLSyntaxTranslator.
type MockSQLSyntaxTranslatorMockRecorder struct {
	mock *MockSQLSyntaxTranslator
}

// NewMockSQLSyntaxTranslator creates a new mock instance.
func NewMockSQLSyntaxTranslator(ctrl *gomock.Controller) *MockSQLSyntaxTranslator {
	mock := &MockSQLSyntaxTranslator{ctrl: ctrl}
	mock.recorder = &MockSQLSyntaxTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLSyntaxTranslator) EXPECT() *MockSQLSyntaxTranslatorMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MockSQLSyntaxTranslator) Translate(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Translate indicates an expected call of Translate.
func (mr *MockSQLSyntaxTranslatorMockRecorder) Translate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockSQLSyntaxTranslator)(nil).Translate), arg0)
}
