// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cdleo/go-sqldb (interfaces: SQLEngineAdapter)

// Package enginesMocks is a generated GoMock package.
package enginesMocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSQLEngineAdapter is a mock of SQLEngineAdapter interface.
type MockSQLEngineAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockSQLEngineAdapterMockRecorder
}

// MockSQLEngineAdapterMockRecorder is the mock recorder for MockSQLEngineAdapter.
type MockSQLEngineAdapterMockRecorder struct {
	mock *MockSQLEngineAdapter
}

// NewMockSQLEngineAdapter creates a new mock instance.
func NewMockSQLEngineAdapter(ctrl *gomock.Controller) *MockSQLEngineAdapter {
	mock := &MockSQLEngineAdapter{ctrl: ctrl}
	mock.recorder = &MockSQLEngineAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLEngineAdapter) EXPECT() *MockSQLEngineAdapterMockRecorder {
	return m.recorder
}

// ErrorHandler mocks base method.
func (m *MockSQLEngineAdapter) ErrorHandler(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ErrorHandler indicates an expected call of ErrorHandler.
func (mr *MockSQLEngineAdapterMockRecorder) ErrorHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorHandler", reflect.TypeOf((*MockSQLEngineAdapter)(nil).ErrorHandler), arg0)
}

// Open mocks base method.
func (m *MockSQLEngineAdapter) Open() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockSQLEngineAdapterMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSQLEngineAdapter)(nil).Open))
}
